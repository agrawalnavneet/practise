Input: word = "dabdcbdcdcd", k = 2

Output: 2

Explanation: We can make word 2-special by deleting 1 occurrence of "a" and 1 occurrence of "d". Therefore, word becomes equal to "bdcbdcdcd" where freq('b') == 2, freq('c') == 3, and freq('d') == 4.
We consider word to be k-special if |freq(word[i]) - freq(word[j])| <= k for all indices i and j in the string.




optimal sol

import java.util.*;

class Solution {
    private List<Integer> nums = new ArrayList<>();
    public int minimumDeletions(String word, int k) {
        nums.clear(); 

        int[] freq = new int[26];
        int n = word.length();

        for (int i = 0; i < n; ++i) {
            ++freq[word.charAt(i) - 'a'];
        }

        for (int i = 0; i < 26; ++i) {
            if (freq[i] > 0) {
                nums.add(freq[i]);
            }
        }

        int ans = n;
        for (int i = 0; i <= n; ++i) {
            ans = Math.min(ans, f(i, k));
        }

        return ans;
    }

    private int f(int i, int k) {
        int ans = 0;
         for (int j = 0; j < nums.size(); ++j) {
            int freq_j = nums.get(j);
            
            if (freq_j < i) {
                ans += freq_j;
            } 
            else if (freq_j > i + k) {
                ans += freq_j - i - k;
            }
        }
        return ans;
    }
}


Time Complexity	O(n)
Space Complexity	O(1)
