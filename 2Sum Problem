
nums = [2, 7, 11, 15], target = 9

Step 1: i=0 → 2 → 9-2=7 → map doesn't have 7 → put (2,0)
Step 2: i=1 → 7 → 9-7=2 → map has 2 → return [0,1]

or 
Suppose nums = [1, 3, 6, 2] and target = 8.
We look for two numbers that add up to 8:

6 + 2 = 8 (indices 2 and 3)
So, answer: [2, 3]



// better sol 

class Solution {
    public int[] twoSum(int[] nums, int target) {
 for (int i=0;i<nums.length;i++){
    for (int j=i+1;j<nums.length;j++){
        if (nums[i]+nums[j]== target){
            return new int[] {i,j};
        }
    }
 }
     return new int[] {};
        
    }
}
//time complexity 	O(n²)
//space complexity 	O(1)

// optimal sol


import java.util.HashMap;

class Solution {
    public int[] twoSum(int[] nums, int target) {
       HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i = 0; i < nums.length; i++) {              
               int remaining = target - nums[i];
            
            if(map.containsKey(remaining)) {

                return new int[] { map.get(remaining), i };
            }
            
            map.put(nums[i], i);
        }
        
        return new int[] {};
    }
}
// time complexity  0(n)
//space complexity 	O(n)
